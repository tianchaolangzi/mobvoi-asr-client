# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import speech_pb2 as speech__pb2


class SpeechStub(object):
    """语音识别服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Recognize = channel.unary_unary(
                '/com.mobvoi.speech.recognition.v1.Speech/Recognize',
                request_serializer=speech__pb2.RecognizeRequest.SerializeToString,
                response_deserializer=speech__pb2.RecognizeResponse.FromString,
                )
        self.StreamingRecognize = channel.stream_stream(
                '/com.mobvoi.speech.recognition.v1.Speech/StreamingRecognize',
                request_serializer=speech__pb2.StreamingRecognizeRequest.SerializeToString,
                response_deserializer=speech__pb2.StreamingRecognizeResponse.FromString,
                )


class SpeechServicer(object):
    """语音识别服务
    """

    def Recognize(self, request, context):
        """同步语音识别接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingRecognize(self, request_iterator, context):
        """双向流式语音识别接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpeechServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Recognize': grpc.unary_unary_rpc_method_handler(
                    servicer.Recognize,
                    request_deserializer=speech__pb2.RecognizeRequest.FromString,
                    response_serializer=speech__pb2.RecognizeResponse.SerializeToString,
            ),
            'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingRecognize,
                    request_deserializer=speech__pb2.StreamingRecognizeRequest.FromString,
                    response_serializer=speech__pb2.StreamingRecognizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.mobvoi.speech.recognition.v1.Speech', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Speech(object):
    """语音识别服务
    """

    @staticmethod
    def Recognize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mobvoi.speech.recognition.v1.Speech/Recognize',
            speech__pb2.RecognizeRequest.SerializeToString,
            speech__pb2.RecognizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingRecognize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.mobvoi.speech.recognition.v1.Speech/StreamingRecognize',
            speech__pb2.StreamingRecognizeRequest.SerializeToString,
            speech__pb2.StreamingRecognizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
